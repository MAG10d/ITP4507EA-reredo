@startuml

package "model" {
    ' 基礎類 - 不可修改
    abstract class Hero {
        - heroID: String
        - heroName: String
        - hp: int
        - damage: int
        + Hero(heroID: String, heroName: String)
        + getHeroID(): String
        + getHeroName(): String
        + setHeroName(heroName: String): void
        + getHp(): int
        + setHp(hp: int): void
        + getDamage(): int
        + setDamage(damage: int): void
        + {abstract} callSkill(): void
        + {abstract} showHeroStatus(): void
    }

    class Warrior {
        - defencePoint: int
        + Warrior(heroID: String, heroName: String)
        + getDefencePoint(): int
        + setDefencePoint(defencePoint: int): void
        + callSkill(): void
        + showHeroStatus(): void
    }

    class Warlock {
        - mp: int
        + Warlock(heroID: String, heroName: String)
        + getMp(): int
        + setMp(mp: int): void
        + callSkill(): void
        + showHeroStatus(): void
    }

    class Player {
        - playerID: String
        - playerName: String
        - heros: Vector<Hero>
        + Player(playerID: String, playerName: String)
        + getPlayerID(): String
        + getPlayerName(): String
        + setPlayerName(playerName: String): void
        + addHero(hero: Hero): void
        + removeHero(hero: Hero): void
        + getHeroes(): Vector<Hero>
        + showPlayerDetails(): void
    }
}

package "factory" {
    ' Hero 工廠相關
    abstract class HeroFactory {
        + {abstract} createHero(heroID: String, heroName: String): Hero
    }

    class WarriorFactory {
        + createHero(heroID: String, heroName: String): Hero
    }

    class WarlockFactory {
        + createHero(heroID: String, heroName: String): Hero
    }

    ' 简化 Command 工厂
    class CommandFactory {
        + createCommand(commandType: String, receiver: Receiver, params: Object[]): Command
    }
}

' Factory 關係
HeroFactory <|-- WarriorFactory
HeroFactory <|-- WarlockFactory

package "command" {
    abstract class Command {
        + execute(): void
        + undo(): void 
    }

    ' Example of improved command classes
    class CreatePlayerCommand implements Command {
        - receiver: Receiver
        - playerID: String
        - playerName: String
        - createdPlayer: Player 
        - playerMemento: Memento 
        + execute(): void
        + undo(): void
    }

    class ChangePlayerNameCommand implements Command {
        - receiver: Receiver
        - playerID: String
        - newName: String
        - oldName: String      
        - playerMemento: Memento
        + execute(): void
        + undo(): void
    }

    class AddHeroCommand implements Command {
        - receiver: Receiver
        - heroType: String
        - heroID: String
        - heroName: String
        - addedHero: Hero      
        - playerMemento: Memento
        + execute(): void
        + undo(): void
    }

    ' 2. g = set current player
    class SetCurrentPlayerCommand implements Command {
        - receiver: Receiver
        - playerID: String
        + execute(): void
        + undo(): void
    }

    ' 4. d = delete hero
    class DeleteHeroCommand implements Command {
        - receiver: Receiver
        - heroID: String
        + execute(): void
        + undo(): void
    }

    ' 5. m = call hero skill
    class CallHeroSkillCommand implements Command {
        - receiver: Receiver
        - heroID: String
        + execute(): void
        + undo(): void
    }

    ' 6. s = show player
    class ShowPlayerCommand implements Command {
        - receiver: Receiver
        + execute(): void
        ' 不需要实现 undo
    }

    ' 7. p = display all players
    class DisplayAllPlayersCommand implements Command {
        - receiver: Receiver
        + execute(): void
        ' 不需要实现 undo
    }

    ' 8. t = change player's name
    class ChangePlayerNameCommand implements Command {
        - receiver: Receiver
        - newName: String
        + execute(): void
        + undo(): void
    }

    ' 9. u = undo
    class UndoCommand implements Command {
        - receiver: Receiver
        + execute(): void
        + undo(): void
    }

    ' 10. r = redo
    class RedoCommand implements Command {
        - receiver: Receiver
        + execute(): void
        + undo(): void
    }

    ' 11. l = list undo/redo
    class ListUndoRedoCommand implements Command {
        - receiver: Receiver
        + execute(): void
        ' 不需要实现 undo
    }

    ' 12. x = exit system
    class ExitSystemCommand implements Command {
        - receiver: Receiver
        + execute(): void
        ' 不需要实现 undo
    }

    ' 13. Select player by ID
    class SelectPlayerCommand implements Command {
        - receiver: Receiver
        - playerID: String
        + execute(): void
        + undo(): void
    }
}


CreatePlayerCommand --> Receiver
SetCurrentPlayerCommand --> Receiver
AddHeroCommand --> Receiver
DeleteHeroCommand --> Receiver
CallHeroSkillCommand --> Receiver
ShowPlayerCommand --> Receiver
DisplayAllPlayersCommand --> Receiver
ChangePlayerNameCommand --> Receiver
UndoCommand --> Receiver
RedoCommand --> Receiver
ListUndoRedoCommand --> Receiver
ExitSystemCommand --> Receiver
SelectPlayerCommand --> Receiver

package "memento" {
    class Memento {
        - state: Object
        - originator: Originator
        + Memento(Originator o)
        + restore(): void
    }

    class Originator {
        - state: Object
        + createMemento(): Memento
        + restoreFromMemento(m: Memento): void
    }

    class CareTaker {
        - mementos: List<Memento>
        + saveMemento(m: Memento): void
        + getMemento(): Memento
    }
}

package "system" {
    class GameSystem {
        - receiver: Receiver
        - commandFactory: CommandFactory
        - commandInvoker: CommandInvoker
        
        ' 系統控制方法
        + initialize(): void
        + shutdown(): void
        + executeCommand(commandType: String, params: Object[]): void
        + undoLastCommand(): void
        + redoLastCommand(): void
    }

    class CommandInvoker {
        - undoStack: Stack<Command>
        - redoStack: Stack<Command>
        - careTaker: CareTaker
        - maxUndoLevels: int
        
        + executeCommand(command: Command): void
        + undo(): void
        + redo(): void
        + canUndo(): boolean
        + canRedo(): boolean
        + showHistory(): void
        + getUndoList(): List<String>
        + getRedoList(): List<String>
        + clearHistory(): void
        - validateUndoLevel(): void
        - trimHistory(): void
    }
}

' 基本關係
Hero <|-- Warrior
Hero <|-- Warlock
Player "1" *-- "0..*" Hero

' Memento 關係
CareTaker "1" o--> "0..*" Memento
Memento "1" --> "1" Originator
Hero --|> Originator
Player --|> Originator

' System 關係
GameSystem o--> HeroFactory
GameSystem "1" *-- "0..*" Player
GameSystem o--> CommandInvoker
GameSystem o--> CommandFactory
GameSystem o--> Receiver  

' Command Pattern 关系
CommandInvoker o--> Command
Command --> Receiver
Receiver o--> HeroFactory

' Add relationships
CommandInvoker --> CareTaker
Command --> Memento
Command --> CareTaker

@enduml